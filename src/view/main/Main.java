/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view.main;

import controllers.Controller;
import enums.Genre;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.Song;

/**
 *
 * @author joanp
 */
public class Main extends javax.swing.JFrame {

    private TableRowSorter<DefaultTableModel> sorter;
    private final Controller controller;
    private int filas;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        controller = new Controller();
        hideButtons();
        hideLabel();
        hideTextField();
        hideSelectionLabel();
        hideSelectionTextField();
        setTitle("Gestión canciones");
        setSize(1100, 550);
        this.setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu1 = new java.awt.PopupMenu();
        popupMenu2 = new java.awt.PopupMenu();
        jLabel2 = new javax.swing.JLabel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        comboSelection = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        songTable = new javax.swing.JTable();
        txtSeach = new javax.swing.JTextField();
        lblCode = new javax.swing.JLabel();
        lblID = new javax.swing.JLabel();
        lblAuthor = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblDuration = new javax.swing.JLabel();
        lblGenre = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        txtAuthor = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtLaunch = new javax.swing.JTextField();
        lblLaunch = new javax.swing.JLabel();
        txtPlatform = new javax.swing.JTextField();
        lblPlatform = new javax.swing.JLabel();
        comboGenre = new javax.swing.JComboBox<>();
        txtDuration = new javax.swing.JFormattedTextField();
        cleanTable = new javax.swing.JButton();

        popupMenu1.setLabel("popupMenu1");

        popupMenu2.setLabel("popupMenu2");

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jDesktopPane1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        comboSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Listar todo", "Filtrar codigo", "Agregar", "Actualizar", "Eliminar" }));
        comboSelection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboSelectionItemStateChanged(evt);
            }
        });
        jDesktopPane1.add(comboSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(51, 31, 180, -1));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel1.setText("SELECCIONE UNA OPCIÓN");
        jDesktopPane1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(51, 6, -1, -1));

        songTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        songTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                songTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(songTable);

        jDesktopPane1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(337, 55, 697, 448));
        jDesktopPane1.add(txtSeach, new org.netbeans.lib.awtextra.AbsoluteConstraints(433, 8, 440, -1));

        lblCode.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lblCode.setText("Buscar:");
        jDesktopPane1.add(lblCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(348, 12, -1, -1));

        lblID.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lblID.setText("ID:");
        jDesktopPane1.add(lblID, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 89, -1, -1));

        lblAuthor.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lblAuthor.setText("Autor:");
        jDesktopPane1.add(lblAuthor, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 191, -1, -1));

        lblName.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lblName.setText("Nombre:");
        jDesktopPane1.add(lblName, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 140, -1, -1));

        lblDuration.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lblDuration.setText("Duración:");
        jDesktopPane1.add(lblDuration, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 291, -1, -1));

        lblGenre.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lblGenre.setText("Genero:");
        jDesktopPane1.add(lblGenre, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 245, -1, -1));
        jDesktopPane1.add(txtId, new org.netbeans.lib.awtextra.AbsoluteConstraints(151, 89, 155, -1));
        jDesktopPane1.add(txtAuthor, new org.netbeans.lib.awtextra.AbsoluteConstraints(151, 191, 155, -1));
        jDesktopPane1.add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(151, 140, 155, -1));

        btnAdd.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        btnAdd.setText("Agregar");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jDesktopPane1.add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 476, 81, -1));

        btnUpdate.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        btnUpdate.setText("Actualizar");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jDesktopPane1.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(231, 476, -1, -1));

        btnDelete.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        btnDelete.setText("Eliminar");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jDesktopPane1.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(116, 476, 77, -1));
        jDesktopPane1.add(txtLaunch, new org.netbeans.lib.awtextra.AbsoluteConstraints(151, 342, 155, -1));

        lblLaunch.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lblLaunch.setText("Lanzamiento:");
        jDesktopPane1.add(lblLaunch, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 346, -1, -1));
        jDesktopPane1.add(txtPlatform, new org.netbeans.lib.awtextra.AbsoluteConstraints(151, 393, 155, -1));

        lblPlatform.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lblPlatform.setText("Plataforma:");
        jDesktopPane1.add(lblPlatform, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 397, -1, -1));

        comboGenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una opción", "Urbano", "Reggaeton", "Electronica", "Salsa", "Merenge", "Clasica", "Dance", "Vallenato", "Corridos", "Regional" }));
        jDesktopPane1.add(comboGenre, new org.netbeans.lib.awtextra.AbsoluteConstraints(151, 242, 155, -1));

        try {
            txtDuration.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jDesktopPane1.add(txtDuration, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 290, 160, -1));

        cleanTable.setText("Limpiar tabla");
        cleanTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanTableActionPerformed(evt);
            }
        });
        jDesktopPane1.add(cleanTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 10, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboSelectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboSelectionItemStateChanged
        if (comboSelection.getSelectedIndex() == 0) {
            cleanTable();
            hideButtons();
            hideLabel();
            hideTextField();
            hideSelectionLabel();
            hideSelectionTextField();
        }

        if (comboSelection.getSelectedIndex() == 1) {
            listAll();
            hideButtons();
            hideLabel();
            hideTextField();
            showSelectionLabel();
            hideSelectionTextField();
            showSelectionTextField();
            disableFields();
        }

        if (comboSelection.getSelectedIndex() == 2) {
            cleanTable();
            cleanFields();
            hideAddButton();
            hideDeleteButton();
            hideUpdateButton();
            showLabel();
            showTextField();
            showSelectionLabel();
            showSelectionTextField();
            disableFields();
        }

        if (comboSelection.getSelectedIndex() == 3) {
            cleanTable();
            cleanFields();
            showAddButton();
            hideUpdateButton();
            hideDeleteButton();
            showLabel();
            showTextField();
            showSelectionLabel();
            showSelectionTextField();
            enableFields();

        }
        if (comboSelection.getSelectedIndex() == 4) {
            cleanTable();
            cleanFields();
            showUpdateButton();
            hideDeleteButton();
            hideAddButton();
            showLabel();
            showTextField();
            showSelectionLabel();
            showSelectionTextField();
            enableFields();

        }

        if (comboSelection.getSelectedIndex() == 5) {
            cleanTable();
            cleanFields();
            showDeleteButton();
            hideAddButton();
            hideUpdateButton();
            showLabel();
            showTextField();
            showSelectionLabel();
            showSelectionTextField();
            enableFields();

        }

    }

    private void listAll() {

        DefaultTableModel model = new DefaultTableModel();

        ArrayList<Song> songs = controller.listSongs();
        model.setColumnIdentifiers(new Object[]{"Id", "Nombre", "Autor", "Genero", "Duración", "Lanzamiento", "Plataforma"});

        songTable.setModel(model);
        songTable.setAutoCreateRowSorter(true);
        sorter = new TableRowSorter<>(model);
        songTable.setRowSorter(sorter);

        for (Song song : songs) {
            model.addRow(new Object[]{
                song.getId(),
                song.getName(),
                song.getAuthor(),
                song.getGenre(),
                song.getDuration(),
                song.getLaunch(),
                song.getPlatform()
            });
        }

    }

    private void hideButtons() {
        hideAddButton();
        hideDeleteButton();
        hideUpdateButton();

    }

    private void hideLabel() {
        lblCode.setVisible(false);

    }

    private void hideTextField() {
        txtSeach.setVisible(false);
    }

    private void hideSelectionLabel() {
        lblID.setVisible(false);
        lblName.setVisible(false);
        lblAuthor.setVisible(false);
        lblGenre.setVisible(false);
        lblDuration.setVisible(false);
        lblLaunch.setVisible(false);
        lblPlatform.setVisible(false);

    }

    private void showButtons() {
        showAddButton();
        showDeleteButton();
        showUpdateButton();
    }

    private void showLabel() {
        lblCode.setVisible(true);

    }

    private void showTextField() {
        txtSeach.setVisible(true);

    }

    private void showSelectionLabel() {
        lblID.setVisible(true);
        lblName.setVisible(true);
        lblAuthor.setVisible(true);
        lblGenre.setVisible(true);
        lblDuration.setVisible(true);
        lblLaunch.setVisible(true);
        lblPlatform.setVisible(true);
    }

    private void disableFields() {
        txtId.setEnabled(false);
        txtName.setEnabled(false);
        txtAuthor.setEnabled(false);
        comboGenre.setEnabled(false);
        txtDuration.setEnabled(false);
        txtLaunch.setEnabled(false);
        txtPlatform.setEnabled(false);
    }

    private void enableFields() {
        txtId.setEnabled(true);
        txtName.setEnabled(true);
        txtAuthor.setEnabled(true);
        comboGenre.setEnabled(true);
        txtDuration.setEnabled(true);
        txtLaunch.setEnabled(true);
        txtPlatform.setEnabled(true);
    }

    private void hideSelectionTextField() {
        txtId.setVisible(false);
        txtName.setVisible(false);
        txtAuthor.setVisible(false);
        comboGenre.setVisible(false);
        txtDuration.setVisible(false);
        txtLaunch.setVisible(false);
        txtPlatform.setVisible(false);
    }

    private void showSelectionTextField() {
        txtId.setVisible(true);
        txtName.setVisible(true);
        txtAuthor.setVisible(true);
        comboGenre.setVisible(true);
        txtDuration.setVisible(true);
        txtLaunch.setVisible(true);
        txtPlatform.setVisible(true);
    }

    private void showAddButton() {
        btnAdd.setVisible(true);
    }

    private void showDeleteButton() {
        btnDelete.setVisible(true);

    }

    private void showUpdateButton() {
        btnUpdate.setVisible(true);

    }

    private void hideAddButton() {
        btnAdd.setVisible(false);

    }

    private void hideDeleteButton() {
        btnDelete.setVisible(false);

    }

    private void hideUpdateButton() {
        btnUpdate.setVisible(false);

    }

    private void cleanTable() {
        DefaultTableModel model = (DefaultTableModel) songTable.getModel();
        model.setRowCount(0);
    }

    private void cleanFields() {
        txtId.setText("");
        txtName.setText("");
        txtAuthor.setText("");
        comboGenre.setSelectedIndex(0);
        txtDuration.setText("");
        txtLaunch.setText("");
        txtPlatform.setText("");
    }

    private boolean hasEmptyFields() {
        return (txtId.getText().isEmpty() || txtName.getText().isEmpty() || txtAuthor.getText().isEmpty() || comboGenre.getSelectedIndex() == 0
                || txtDuration.getText().isEmpty() || txtLaunch.getText().isEmpty() || txtPlatform.getText().isEmpty());

    }//GEN-LAST:event_comboSelectionItemStateChanged

    private void songTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_songTableMouseClicked
        int seleccion = songTable.getSelectedRow();
        txtId.setText(songTable.getValueAt(seleccion, 0).toString());
        txtName.setText(songTable.getValueAt(seleccion, 1).toString());
        txtAuthor.setText(songTable.getValueAt(seleccion, 2).toString());
        comboGenre.setSelectedItem(songTable.getValueAt(seleccion, 3).toString());
        txtDuration.setText(songTable.getValueAt(seleccion, 4).toString());
        txtLaunch.setText(songTable.getValueAt(seleccion, 5).toString());
        txtPlatform.setText(songTable.getValueAt(seleccion, 6).toString());
        filas = seleccion;

        int seleccionar = songTable.rowAtPoint(evt.getPoint());
        txtId.setText(String.valueOf(songTable.getValueAt(seleccionar, 0)));
        txtName.setText(String.valueOf(songTable.getValueAt(seleccionar, 1)));
        txtAuthor.setText(String.valueOf(songTable.getValueAt(seleccionar, 2)));
        comboGenre.setSelectedItem(String.valueOf(songTable.getValueAt(seleccionar, 3)));
        txtDuration.setText(String.valueOf(songTable.getValueAt(seleccionar, 4)));
        txtLaunch.setText(String.valueOf(songTable.getValueAt(seleccionar, 5)));
        txtPlatform.setText(String.valueOf(songTable.getValueAt(seleccionar, 6)));
    }//GEN-LAST:event_songTableMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (hasEmptyFields()) {
            JOptionPane.showMessageDialog(null, "Ingrese todos los datos", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int id = Integer.parseInt(txtId.getText().trim());
        String name = txtName.getText();
        String author = txtAuthor.getText();
        Genre genre = Genre.valueOf(comboGenre.getSelectedItem().toString().trim());
        String duration = txtDuration.getText();
        String launch = txtLaunch.getText();
        String platform = txtPlatform.getText();

        try {
            Song song = new Song(id, name, author, genre, duration, launch, platform);
            controller.addSong(song);
            JOptionPane.showMessageDialog(null, "Canción registrada con éxito", "Proceso exitoso", JOptionPane.INFORMATION_MESSAGE);
            listAll();
            cleanFields();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error al registrar la canción", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (hasEmptyFields()) {
            JOptionPane.showMessageDialog(null, "Ingrese todos los datos", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int id = Integer.parseInt(txtId.getText().trim());
        String name = txtName.getText();
        String author = txtAuthor.getText();
        Genre genre = Genre.valueOf(comboGenre.getSelectedItem().toString().trim());
        String duration = txtDuration.getText();
        String launch = txtLaunch.getText();
        String platform = txtPlatform.getText();

        Song updatedSong = new Song(id, name, author, genre, duration, launch, platform);
        boolean succes = controller.updateSong(updatedSong);

        if (succes) {
            listAll();
            JOptionPane.showMessageDialog(null, "Canción registrada con éxito", "Proceso exitoso", JOptionPane.INFORMATION_MESSAGE);
            cleanFields();
        } else {
            JOptionPane.showMessageDialog(null, "Error al registrar la canción", "Error", JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int selected = songTable.getSelectedRow();

        if (selected >= 0) {

            int id = Integer.parseInt(songTable.getModel().getValueAt(selected, 0).toString());

            int answer = JOptionPane.showConfirmDialog(null, "¿Está seguro de eliminar el libro?",
                    "Confirmación", JOptionPane.YES_NO_OPTION);

            if (answer == 0) {

                boolean success = controller.deleteSong(id);

                if (success) {
                    listAll();
                    JOptionPane.showMessageDialog(null, "Canción eliminado correctamente");
                } else {
                    JOptionPane.showMessageDialog(null, "No se pudo eliminar", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un libro de la tabla");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void cleanTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanTableActionPerformed
        cleanTable();
    }//GEN-LAST:event_cleanTableActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton cleanTable;
    private javax.swing.JComboBox<String> comboGenre;
    private javax.swing.JComboBox<String> comboSelection;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAuthor;
    private javax.swing.JLabel lblCode;
    private javax.swing.JLabel lblDuration;
    private javax.swing.JLabel lblGenre;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblLaunch;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPlatform;
    private java.awt.PopupMenu popupMenu1;
    private java.awt.PopupMenu popupMenu2;
    private javax.swing.JTable songTable;
    private javax.swing.JTextField txtAuthor;
    private javax.swing.JFormattedTextField txtDuration;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtLaunch;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPlatform;
    private javax.swing.JTextField txtSeach;
    // End of variables declaration//GEN-END:variables
}
